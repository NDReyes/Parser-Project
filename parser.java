
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\007\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\007" +
    "\000\002\007\003\000\002\007\002\000\002\010\004\000" +
    "\002\010\002\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\023\003\000\002\023" +
    "\006\000\002\030\003\000\002\030\005\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\004\020\005\001\002\000\004\002\064\001" +
    "\002\000\004\062\006\001\002\000\004\052\007\001\002" +
    "\000\016\004\ufffa\005\ufffa\006\ufffa\007\ufffa\053\ufffd\064" +
    "\014\001\002\000\016\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\053\ufffd\064\014\001\002\000\012\004\022\005\020\006" +
    "\017\007\021\001\002\000\004\053\015\001\002\000\004" +
    "\053\uffff\001\002\000\012\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\001\002\000\004\002\001\001\002\000\004\062\023" +
    "\001\002\000\004\062\ufff5\001\002\000\004\062\ufff6\001" +
    "\002\000\004\062\ufff4\001\002\000\004\062\ufff7\001\002" +
    "\000\006\043\024\060\ufff8\001\002\000\020\010\037\011" +
    "\035\012\031\013\032\014\033\062\034\063\030\001\002" +
    "\000\004\060\026\001\002\000\016\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\053\ufffc\064\ufffc\001\002\000\036\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\041\ufff1\042\ufff1\051\ufff1\060\ufff1" +
    "\001\002\000\036\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\041\uffef" +
    "\042\uffef\051\uffef\060\uffef\001\002\000\036\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\041\uffed\042\uffed\051\uffed\060\uffed\001" +
    "\002\000\036\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\042" +
    "\uffeb\051\uffeb\060\uffeb\001\002\000\036\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\041\uffea\042\uffea\051\uffea\060\uffea\001\002" +
    "\000\042\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3\042\ufff3" +
    "\046\057\050\056\051\ufff3\060\ufff3\001\002\000\036\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\041\uffee\042\uffee\051\uffee\060" +
    "\uffee\001\002\000\034\026\043\027\042\030\046\031\052" +
    "\032\050\033\047\034\041\035\053\036\045\037\044\041" +
    "\054\042\040\060\ufff9\001\002\000\036\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\041\uffec\042\uffec\051\uffec\060\uffec\001\002" +
    "\000\020\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\062" +
    "\uffdd\063\uffdd\001\002\000\020\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\062\uffe2\063\uffe2\001\002\000\020\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\062\uffe7\063\uffe7" +
    "\001\002\000\020\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\062\uffe8\063\uffe8\001\002\000\020\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\062\uffdf\063\uffdf\001\002\000" +
    "\020\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\062\uffe0" +
    "\063\uffe0\001\002\000\020\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\062\uffe6\063\uffe6\001\002\000\020\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\062\uffe3\063\uffe3\001" +
    "\002\000\020\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\062\uffe4\063\uffe4\001\002\000\020\010\037\011\035\012" +
    "\031\013\032\014\033\062\034\063\030\001\002\000\020" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\062\uffe5\063" +
    "\uffe5\001\002\000\020\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\062\uffe1\063\uffe1\001\002\000\020\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\062\uffde\063\uffde\001\002" +
    "\000\036\026\043\027\042\030\046\031\052\032\050\033" +
    "\047\034\041\035\053\036\045\037\044\041\054\042\040" +
    "\051\uffe9\060\uffe9\001\002\000\020\010\037\011\035\012" +
    "\031\013\032\014\033\062\034\063\030\001\002\000\004" +
    "\047\060\001\002\000\036\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\041\ufff0\042\ufff0\051\ufff0\060\ufff0\001\002\000\034\026" +
    "\043\027\042\030\046\031\052\032\050\033\047\034\041" +
    "\035\053\036\045\037\044\041\054\042\040\051\062\001" +
    "\002\000\036\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2\042" +
    "\ufff2\051\ufff2\060\ufff2\001\002\000\004\053\ufffe\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\011\004\012" +
    "\006\007\007\010\001\001\000\010\004\062\006\007\007" +
    "\010\001\001\000\004\014\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\024\001\001\000" +
    "\006\023\026\030\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\026\030\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\050\001\001\000\006" +
    "\023\026\030\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OPENCURLY memberdecls CLOSEDCURLY 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls m = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Program(i, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecls 
            {
              Memberdecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls f = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Memberdecls(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl a = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls b = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecls(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= 
            {
              Fielddecls RESULT =null;
		RESULT = new Fielddecls();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecl ::= optionalfinal type ID optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Optionalfinal f = (Optionalfinal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr e = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Fielddecl(f, t, i, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optionalfinal ::= FINAL 
            {
              Optionalfinal RESULT =null;
		RESULT = new Optionalfinal("final");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalfinal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optionalfinal ::= 
            {
              Optionalfinal RESULT =null;
		RESULT = new Optionalfinal("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalfinal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalexpr ::= ASSMNT expr 
            {
              Optionalexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Optionalexpr(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optionalexpr ::= 
            {
              Optionalexpr RESULT =null;
		RESULT = new Optionalexpr();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = new Type("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Name(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // name ::= ID OPENBRACK expr CLOSEDBRACK 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Name(i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= ID OPENPARAN CLOSEDPARAN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Expr(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char b = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float d = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT = new Expr("true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT = new Expr("false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr binaryop expr 
            {
              Expr RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binaryop bin = (Binaryop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(lhs, bin, rhs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binaryop ::= MULT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binaryop ::= DIVIDE 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binaryop ::= ADD 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binaryop ::= SUBTRACT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binaryop ::= LESSTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binaryop ::= GREATERTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binaryop ::= LESSTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binaryop ::= GREATERTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binaryop ::= EQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binaryop ::= NOTEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binaryop ::= OR 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binaryop ::= AND 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
