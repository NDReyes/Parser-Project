
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\007\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\007" +
    "\000\002\007\003\000\002\007\002\000\002\010\004\000" +
    "\002\010\002\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\023\003\000\002\023" +
    "\006\000\002\024\005\000\002\024\003\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\003\000" +
    "\002\027\003\000\002\027\002\000\002\030\003\000\002" +
    "\030\006\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\003\000" +
    "\002\032\002\000\002\033\004\000\002\033\004\000\002" +
    "\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\020\005\001\002\000\004\002\103\001" +
    "\002\000\004\062\006\001\002\000\004\052\007\001\002" +
    "\000\016\004\ufffa\005\ufffa\006\ufffa\007\ufffa\053\ufffd\064" +
    "\014\001\002\000\016\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\053\ufffd\064\014\001\002\000\012\004\022\005\020\006" +
    "\017\007\021\001\002\000\004\053\015\001\002\000\004" +
    "\053\uffff\001\002\000\012\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\001\002\000\004\002\001\001\002\000\004\062\023" +
    "\001\002\000\004\062\ufff5\001\002\000\004\062\ufff6\001" +
    "\002\000\004\062\ufff4\001\002\000\004\062\ufff7\001\002" +
    "\000\006\043\024\060\ufff8\001\002\000\030\010\042\011" +
    "\040\012\032\013\033\014\036\030\035\031\044\046\030" +
    "\057\034\062\037\063\031\001\002\000\004\060\026\001" +
    "\002\000\016\004\ufffc\005\ufffc\006\ufffc\007\ufffc\053\ufffc" +
    "\064\ufffc\001\002\000\042\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\041\uffe9\042\uffe9\047\uffe9\051\uffe9\055\uffe9\060\uffe9\001" +
    "\002\000\030\010\042\011\040\012\032\013\033\014\036" +
    "\030\035\031\044\046\030\057\034\062\037\063\031\001" +
    "\002\000\042\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7\042" +
    "\uffe7\047\uffe7\051\uffe7\055\uffe7\060\uffe7\001\002\000\042" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\042\uffe5\047\uffe5" +
    "\051\uffe5\055\uffe5\060\uffe5\001\002\000\042\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\041\uffe3\042\uffe3\047\uffe3\051\uffe3\055" +
    "\uffe3\060\uffe3\001\002\000\030\010\042\011\040\012\032" +
    "\013\033\014\036\030\035\031\044\046\030\057\034\062" +
    "\037\063\031\001\002\000\030\010\042\011\040\012\032" +
    "\013\033\014\036\030\035\031\044\046\030\057\034\062" +
    "\037\063\031\001\002\000\042\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\041\uffe2\042\uffe2\047\uffe2\051\uffe2\055\uffe2\060\uffe2" +
    "\001\002\000\046\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3" +
    "\042\ufff3\046\065\047\ufff3\050\064\051\ufff3\055\ufff3\060" +
    "\ufff3\001\002\000\042\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\041" +
    "\uffe6\042\uffe6\047\uffe6\051\uffe6\055\uffe6\060\uffe6\001\002" +
    "\000\042\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf\042\uffdf" +
    "\047\uffdf\051\uffdf\055\uffdf\060\uffdf\001\002\000\042\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\041\uffe4\042\uffe4\047\uffe4\051" +
    "\uffe4\055\uffe4\060\uffe4\001\002\000\034\026\051\027\050" +
    "\030\054\031\060\032\057\033\055\034\047\035\062\036" +
    "\053\037\052\041\061\042\046\060\ufff9\001\002\000\030" +
    "\010\042\011\040\012\032\013\033\014\036\030\035\031" +
    "\044\046\030\057\034\062\037\063\031\001\002\000\042" +
    "\026\051\027\050\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\047\uffcf" +
    "\051\uffcf\055\uffcf\060\uffcf\001\002\000\030\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\030\uffd3\031\uffd3\046\uffd3" +
    "\057\uffd3\062\uffd3\063\uffd3\001\002\000\030\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\030\uffd8\031\uffd8\046\uffd8" +
    "\057\uffd8\062\uffd8\063\uffd8\001\002\000\030\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\030\uffdd\031\uffdd\046\uffdd" +
    "\057\uffdd\062\uffdd\063\uffdd\001\002\000\030\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\030\uffde\031\uffde\046\uffde" +
    "\057\uffde\062\uffde\063\uffde\001\002\000\030\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\030\uffd5\031\uffd5\046\uffd5" +
    "\057\uffd5\062\uffd5\063\uffd5\001\002\000\030\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\030\uffd6\031\uffd6\046\uffd6" +
    "\057\uffd6\062\uffd6\063\uffd6\001\002\000\030\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\030\uffdc\031\uffdc\046\uffdc" +
    "\057\uffdc\062\uffdc\063\uffdc\001\002\000\030\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\030\uffd9\031\uffd9\046\uffd9" +
    "\057\uffd9\062\uffd9\063\uffd9\001\002\000\030\010\042\011" +
    "\040\012\032\013\033\014\036\030\035\031\044\046\030" +
    "\057\034\062\037\063\031\001\002\000\030\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\030\uffda\031\uffda\046\uffda" +
    "\057\uffda\062\uffda\063\uffda\001\002\000\030\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\030\uffdb\031\uffdb\046\uffdb" +
    "\057\uffdb\062\uffdb\063\uffdb\001\002\000\030\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\030\uffd4\031\uffd4\046\uffd4" +
    "\057\uffd4\062\uffd4\063\uffd4\001\002\000\030\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\030\uffd7\031\uffd7\046\uffd7" +
    "\057\uffd7\062\uffd7\063\uffd7\001\002\000\042\026\051\027" +
    "\050\030\054\031\060\032\057\033\055\034\047\035\062" +
    "\036\053\037\052\041\061\042\046\047\uffe1\051\uffe1\055" +
    "\uffe1\060\uffe1\001\002\000\030\010\042\011\040\012\032" +
    "\013\033\014\036\030\035\031\044\046\030\057\034\062" +
    "\037\063\031\001\002\000\032\010\042\011\040\012\032" +
    "\013\033\014\036\030\035\031\044\046\030\047\uffd1\057" +
    "\034\062\037\063\031\001\002\000\004\047\uffd2\001\002" +
    "\000\004\047\073\001\002\000\036\026\051\027\050\030" +
    "\054\031\060\032\057\033\055\034\047\035\062\036\053" +
    "\037\052\041\061\042\046\047\ufff0\055\071\001\002\000" +
    "\030\010\042\011\040\012\032\013\033\014\036\030\035" +
    "\031\044\046\030\057\034\062\037\063\031\001\002\000" +
    "\004\047\ufff1\001\002\000\042\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\041\uffe8\042\uffe8\047\uffe8\051\uffe8\055\uffe8\060\uffe8" +
    "\001\002\000\034\026\051\027\050\030\054\031\060\032" +
    "\057\033\055\034\047\035\062\036\053\037\052\041\061" +
    "\042\046\051\075\001\002\000\042\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\041\ufff2\042\ufff2\047\ufff2\051\ufff2\055\ufff2\060" +
    "\ufff2\001\002\000\042\026\051\027\050\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041" +
    "\uffce\042\uffce\047\uffce\051\uffce\055\uffce\060\uffce\001\002" +
    "\000\042\026\051\027\050\030\054\031\060\032\057\033" +
    "\055\034\047\035\062\036\053\037\052\041\061\042\046" +
    "\047\uffd0\051\uffd0\055\uffd0\060\uffd0\001\002\000\034\026" +
    "\051\027\050\030\054\031\060\032\057\033\055\034\047" +
    "\035\062\036\053\037\052\041\061\042\046\047\101\001" +
    "\002\000\042\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\041\uffe0\042" +
    "\uffe0\047\uffe0\051\uffe0\055\uffe0\060\uffe0\001\002\000\004" +
    "\053\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\011\004\012" +
    "\006\007\007\010\001\001\000\010\004\101\006\007\007" +
    "\010\001\001\000\004\014\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\024\001\001\000" +
    "\010\023\026\030\042\033\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\026\030" +
    "\077\033\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\026\030\076\033\040\001" +
    "\001\000\010\023\026\030\075\033\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\055\001\001\000\010" +
    "\023\026\030\044\033\040\001\001\000\004\031\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\026\030\062" +
    "\033\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\055\001\001" +
    "\000\010\023\026\030\073\033\040\001\001\000\014\023" +
    "\026\024\065\030\067\032\066\033\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\055\001\001\000" +
    "\012\023\026\024\071\030\067\033\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\055\001\001\000" +
    "\002\001\001\000\004\031\055\001\001\000\004\031\055" +
    "\001\001\000\004\031\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OPENCURLY memberdecls CLOSEDCURLY 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls m = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Program(i, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecls 
            {
              Memberdecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls f = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Memberdecls(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl a = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls b = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecls(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= 
            {
              Fielddecls RESULT =null;
		RESULT = new Fielddecls();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecl ::= optionalfinal type ID optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Optionalfinal f = (Optionalfinal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr e = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Fielddecl(f, t, i, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optionalfinal ::= FINAL 
            {
              Optionalfinal RESULT =null;
		RESULT = new Optionalfinal("final");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalfinal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optionalfinal ::= 
            {
              Optionalfinal RESULT =null;
		RESULT = new Optionalfinal("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalfinal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalexpr ::= ASSMNT expr 
            {
              Optionalexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Optionalexpr(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optionalexpr ::= 
            {
              Optionalexpr RESULT =null;
		RESULT = new Optionalexpr();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = new Type("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Name(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // name ::= ID OPENBRACK expr CLOSEDBRACK 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Name(i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Args(e, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Args(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // readlist ::= name COMMA readlist 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Readlist(n, r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Readlist(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // printlist ::= expr COMMA printlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlist(e, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlist(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlinelist(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		RESULT = new Printlinelist();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= ID OPENPARAN optionalargs CLOSEDPARAN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalargs a = (Optionalargs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(i, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char b = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float d = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT = new Expr("true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT = new Expr("false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr binaryop expr 
            {
              Expr RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binaryop bin = (Binaryop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(lhs, bin, rhs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= OPENPARAN expr CLOSEDPARAN 
            {
              Expr RESULT =null;
		int exprInputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprInputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr exprInput = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(exprInput);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= unaryexpr 
            {
              Expr RESULT =null;
		int unExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Unaryexpr unExpr = (Unaryexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(unExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binaryop ::= MULT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binaryop ::= DIVIDE 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binaryop ::= ADD 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binaryop ::= SUBTRACT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binaryop ::= LESSTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binaryop ::= GREATERTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binaryop ::= LESSTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binaryop ::= GREATERTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binaryop ::= EQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binaryop ::= NOTEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binaryop ::= OR 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binaryop ::= AND 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // optionalargs ::= args 
            {
              Optionalargs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Optionalargs(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalargs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optionalargs ::= 
            {
              Optionalargs RESULT =null;
		RESULT = new Optionalargs();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalargs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unaryexpr ::= TILDE expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("~", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unaryexpr ::= SUBTRACT expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("-", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unaryexpr ::= ADD expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("+", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
