
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\004" +
    "\000\002\005\002\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\035\004\000\002\036\006\000\002" +
    "\007\003\000\002\007\002\000\002\010\004\000\002\010" +
    "\002\000\002\011\014\000\002\012\003\000\002\012\002" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\002\000\002\016\005\000\002\016" +
    "\003\000\002\017\004\000\002\017\006\000\002\020\004" +
    "\000\002\020\002\000\002\021\010\000\002\021\007\000" +
    "\002\021\006\000\002\021\007\000\002\021\007\000\002" +
    "\021\007\000\002\021\006\000\002\021\007\000\002\021" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\007\000\002\022\005\000\002\022\003\000" +
    "\002\023\003\000\002\023\006\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\003\000\002\027\002" +
    "\000\002\030\003\000\002\030\006\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\030\006\000\002\030\011" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\002\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\034\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\020\005\001\002\000\004\002\254\001" +
    "\002\000\004\062\006\001\002\000\004\052\007\001\002" +
    "\000\020\004\010\005\022\006\011\007\023\025\ufffd\053" +
    "\ufffd\064\021\001\002\000\006\047\uffec\062\uffec\001\002" +
    "\000\006\047\uffea\062\uffea\001\002\000\004\053\253\001" +
    "\002\000\040\004\ufff9\005\ufff9\006\ufff9\007\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\052" +
    "\ufff9\053\ufff9\062\ufff9\064\ufff9\001\002\000\040\004\010" +
    "\005\022\006\011\007\023\015\ufffd\016\ufffd\017\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\052\ufffd\053\ufffd\062\ufffd" +
    "\064\021\001\002\000\040\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\052\ufffa\053\ufffa\062\ufffa\064\ufffa\001\002\000" +
    "\040\004\ufff8\005\ufff8\006\ufff8\007\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\052\ufff8\053" +
    "\ufff8\062\ufff8\064\ufff8\001\002\000\016\004\010\005\022" +
    "\006\011\007\023\025\125\053\ufffb\001\002\000\004\062" +
    "\115\001\002\000\012\004\010\005\022\006\011\007\023" +
    "\001\002\000\006\047\uffeb\062\uffeb\001\002\000\006\047" +
    "\uffe9\062\uffe9\001\002\000\040\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\015\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\052\ufff7\053\ufff7\062\ufff7\064\ufff7\001\002" +
    "\000\004\062\026\001\002\000\006\043\027\060\ufff2\001" +
    "\002\000\030\010\046\011\043\012\035\013\036\014\041" +
    "\030\037\031\047\046\033\057\040\062\042\063\034\001" +
    "\002\000\004\060\031\001\002\000\040\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\052\ufff6\053\ufff6\062\ufff6\064\ufff6" +
    "\001\002\000\046\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7" +
    "\042\uffc7\047\uffc7\051\uffc7\054\uffc7\055\uffc7\056\uffc7\060" +
    "\uffc7\001\002\000\040\004\010\005\022\006\011\007\023" +
    "\010\046\011\043\012\035\013\036\014\041\030\037\031" +
    "\047\046\033\057\040\062\042\063\034\001\002\000\046" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5\047\uffc5" +
    "\051\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5\001\002\000" +
    "\046\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3\047" +
    "\uffc3\051\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3\001\002" +
    "\000\046\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1\042\uffc1" +
    "\047\uffc1\051\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\001" +
    "\002\000\030\010\046\011\043\012\035\013\036\014\041" +
    "\030\037\031\047\046\033\057\040\062\042\063\034\001" +
    "\002\000\030\010\046\011\043\012\035\013\036\014\041" +
    "\030\037\031\047\046\033\057\040\062\042\063\034\001" +
    "\002\000\046\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\041\uffc0\042" +
    "\uffc0\047\uffc0\051\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0" +
    "\001\002\000\052\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1" +
    "\042\uffd1\046\070\047\uffd1\050\067\051\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\060\uffd1\001\002\000\046\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\041\uffc4\042\uffc4\047\uffc4\051\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\060\uffc4\001\002\000\046\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\041\uffbd\042\uffbd\047\uffbd\051\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\060\uffbd\001\002\000\034\026\054" +
    "\027\053\030\057\031\063\032\062\033\060\034\052\035" +
    "\064\036\056\037\055\041\065\042\051\060\ufff3\001\002" +
    "\000\046\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2" +
    "\047\uffc2\051\uffc2\054\uffc2\055\uffc2\056\uffc2\060\uffc2\001" +
    "\002\000\030\010\046\011\043\012\035\013\036\014\041" +
    "\030\037\031\047\046\033\057\040\062\042\063\034\001" +
    "\002\000\046\026\054\027\053\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\041\uffab\042" +
    "\uffab\047\uffab\051\uffab\054\uffab\055\uffab\056\uffab\060\uffab" +
    "\001\002\000\030\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\030\uffaf\031\uffaf\046\uffaf\057\uffaf\062\uffaf\063\uffaf" +
    "\001\002\000\030\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\030\uffb4\031\uffb4\046\uffb4\057\uffb4\062\uffb4\063\uffb4" +
    "\001\002\000\030\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\030\uffb9\031\uffb9\046\uffb9\057\uffb9\062\uffb9\063\uffb9" +
    "\001\002\000\030\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\030\uffba\031\uffba\046\uffba\057\uffba\062\uffba\063\uffba" +
    "\001\002\000\030\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\030\uffb1\031\uffb1\046\uffb1\057\uffb1\062\uffb1\063\uffb1" +
    "\001\002\000\030\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\030\uffb2\031\uffb2\046\uffb2\057\uffb2\062\uffb2\063\uffb2" +
    "\001\002\000\030\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\030\uffb8\031\uffb8\046\uffb8\057\uffb8\062\uffb8\063\uffb8" +
    "\001\002\000\030\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\030\uffb5\031\uffb5\046\uffb5\057\uffb5\062\uffb5\063\uffb5" +
    "\001\002\000\030\010\046\011\043\012\035\013\036\014" +
    "\041\030\037\031\047\046\033\057\040\062\042\063\034" +
    "\001\002\000\030\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\030\uffb6\031\uffb6\046\uffb6\057\uffb6\062\uffb6\063\uffb6" +
    "\001\002\000\030\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\030\uffb7\031\uffb7\046\uffb7\057\uffb7\062\uffb7\063\uffb7" +
    "\001\002\000\030\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\030\uffb3\031\uffb3\046\uffb3\057\uffb3\062\uffb3\063\uffb3" +
    "\001\002\000\030\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\030\uffb0\031\uffb0\046\uffb0\057\uffb0\062\uffb0\063\uffb0" +
    "\001\002\000\046\026\054\027\053\030\057\031\063\032" +
    "\062\033\060\034\052\035\064\036\056\037\055\041\065" +
    "\042\051\047\uffbf\051\uffbf\054\uffbf\055\uffbf\056\uffbf\060" +
    "\uffbf\001\002\000\030\010\046\011\043\012\035\013\036" +
    "\014\041\030\037\031\047\046\033\057\040\062\042\063" +
    "\034\001\002\000\032\010\046\011\043\012\035\013\036" +
    "\014\041\030\037\031\047\046\033\047\uffad\057\040\062" +
    "\042\063\034\001\002\000\004\047\uffae\001\002\000\004" +
    "\047\076\001\002\000\036\026\054\027\053\030\057\031" +
    "\063\032\062\033\060\034\052\035\064\036\056\037\055" +
    "\041\065\042\051\047\uffce\055\074\001\002\000\030\010" +
    "\046\011\043\012\035\013\036\014\041\030\037\031\047" +
    "\046\033\057\040\062\042\063\034\001\002\000\004\047" +
    "\uffcf\001\002\000\046\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\047\uffc6\051\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\060\uffc6\001\002\000\034\026\054\027\053\030\057\031" +
    "\063\032\062\033\060\034\052\035\064\036\056\037\055" +
    "\041\065\042\051\051\100\001\002\000\054\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\047\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0" +
    "\001\002\000\046\026\054\027\053\030\057\031\063\032" +
    "\062\033\060\034\052\035\064\036\056\037\055\041\065" +
    "\042\051\047\uffac\051\uffac\054\uffac\055\uffac\056\uffac\060" +
    "\uffac\001\002\000\046\026\054\027\053\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\041" +
    "\uffaa\042\uffaa\047\uffaa\051\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\060\uffaa\001\002\000\036\026\054\027\053\030\057\031" +
    "\063\032\062\033\060\034\052\035\064\036\056\037\055" +
    "\041\065\042\051\047\107\056\110\001\002\000\004\047" +
    "\105\001\002\000\030\010\046\011\043\012\035\013\036" +
    "\014\041\030\037\031\047\046\033\057\040\062\042\063" +
    "\034\001\002\000\046\026\054\027\053\030\057\031\063" +
    "\032\062\033\060\034\052\035\064\036\056\037\055\041" +
    "\065\042\051\047\uffbc\051\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\060\uffbc\001\002\000\046\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\041\uffbe\042\uffbe\047\uffbe\051\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\060\uffbe\001\002\000\030\010\046\011\043\012\035" +
    "\013\036\014\041\030\037\031\047\046\033\057\040\062" +
    "\042\063\034\001\002\000\034\026\054\027\053\030\057" +
    "\031\063\032\062\033\060\034\052\035\064\036\056\037" +
    "\055\041\065\042\051\054\112\001\002\000\030\010\046" +
    "\011\043\012\035\013\036\014\041\030\037\031\047\046" +
    "\033\057\040\062\042\063\034\001\002\000\034\026\054" +
    "\027\053\030\057\031\063\032\062\033\060\034\052\035" +
    "\064\036\056\037\055\041\065\042\051\047\114\001\002" +
    "\000\046\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\041\uffbb\042\uffbb" +
    "\047\uffbb\051\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\001" +
    "\002\000\010\043\027\050\116\060\ufff2\001\002\000\004" +
    "\063\117\001\002\000\004\051\120\001\002\000\004\060" +
    "\121\001\002\000\040\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\052\uffa9\053\uffa9\062\uffa9\064\uffa9\001\002\000\016" +
    "\004\010\005\022\006\011\007\023\025\125\053\ufffb\001" +
    "\002\000\004\062\127\001\002\000\004\053\uffff\001\002" +
    "\000\004\062\uffed\001\002\000\004\062\uffee\001\002\000" +
    "\004\046\130\001\002\000\014\004\010\005\022\006\011" +
    "\007\023\047\uffe7\001\002\000\006\047\uffe5\055\247\001" +
    "\002\000\004\062\244\001\002\000\004\047\uffe8\001\002" +
    "\000\004\047\135\001\002\000\004\052\136\001\002\000" +
    "\036\004\010\005\022\006\011\007\023\015\ufffd\016\ufffd" +
    "\017\ufffd\022\ufffd\023\ufffd\024\ufffd\052\ufffd\053\ufffd\062" +
    "\ufffd\064\021\001\002\000\024\015\140\016\147\017\152" +
    "\022\145\023\141\024\151\052\150\053\uffe1\062\146\001" +
    "\002\000\004\046\234\001\002\000\004\046\230\001\002" +
    "\000\010\043\221\044\223\045\222\001\002\000\004\053" +
    "\217\001\002\000\024\015\140\016\147\017\152\022\145" +
    "\023\141\024\151\052\150\053\uffe1\062\146\001\002\000" +
    "\004\046\205\001\002\000\014\043\uffd1\044\uffd1\045\uffd1" +
    "\046\177\050\067\001\002\000\004\046\173\001\002\000" +
    "\036\004\010\005\022\006\011\007\023\015\ufffd\016\ufffd" +
    "\017\ufffd\022\ufffd\023\ufffd\024\ufffd\052\ufffd\053\ufffd\062" +
    "\ufffd\064\021\001\002\000\032\010\046\011\043\012\035" +
    "\013\036\014\041\030\037\031\047\046\033\057\040\060" +
    "\163\062\042\063\034\001\002\000\004\046\153\001\002" +
    "\000\032\010\046\011\043\012\035\013\036\014\041\030" +
    "\037\031\047\046\033\047\uffc8\057\040\062\042\063\034" +
    "\001\002\000\004\047\uffc9\001\002\000\004\047\161\001" +
    "\002\000\036\026\054\027\053\030\057\031\063\032\062" +
    "\033\060\034\052\035\064\036\056\037\055\041\065\042" +
    "\051\047\uffca\055\157\001\002\000\030\010\046\011\043" +
    "\012\035\013\036\014\041\030\037\031\047\046\033\057" +
    "\040\062\042\063\034\001\002\000\004\047\uffcb\001\002" +
    "\000\004\060\162\001\002\000\030\015\uffdb\016\uffdb\017" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\052\uffdb\053\uffdb" +
    "\062\uffdb\065\uffdb\001\002\000\030\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\052\uffd8\053\uffd8" +
    "\062\uffd8\065\uffd8\001\002\000\034\026\054\027\053\030" +
    "\057\031\063\032\062\033\060\034\052\035\064\036\056" +
    "\037\055\041\065\042\051\060\165\001\002\000\030\015" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\052\uffd7\053\uffd7\062\uffd7\065\uffd7\001\002\000\024\015" +
    "\140\016\147\017\152\022\145\023\141\024\151\052\150" +
    "\053\uffe1\062\146\001\002\000\004\053\170\001\002\000" +
    "\032\015\uffef\016\uffef\017\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\052\uffef\053\uffef\060\171\062\uffef\065\uffef\001" +
    "\002\000\042\004\ufff0\005\ufff0\006\ufff0\007\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\052\ufff0\053\ufff0\062\ufff0\065\ufff0\001\002\000\030" +
    "\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\052\uffd4\053\uffd4\062\uffd4\065\uffd4\001\002\000\030" +
    "\010\046\011\043\012\035\013\036\014\041\030\037\031" +
    "\047\046\033\057\040\062\042\063\034\001\002\000\004" +
    "\047\175\001\002\000\004\060\176\001\002\000\030\015" +
    "\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\052\uffdc\053\uffdc\062\uffdc\065\uffdc\001\002\000\032\010" +
    "\046\011\043\012\035\013\036\014\041\030\037\031\047" +
    "\046\033\047\200\057\040\062\042\063\034\001\002\000" +
    "\004\060\204\001\002\000\004\047\202\001\002\000\004" +
    "\060\203\001\002\000\030\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\052\uffd9\053\uffd9\062\uffd9" +
    "\065\uffd9\001\002\000\030\015\uffda\016\uffda\017\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\052\uffda\053\uffda\062\uffda" +
    "\065\uffda\001\002\000\030\010\046\011\043\012\035\013" +
    "\036\014\041\030\037\031\047\046\033\057\040\062\042" +
    "\063\034\001\002\000\034\026\054\027\053\030\057\031" +
    "\063\032\062\033\060\034\052\035\064\036\056\037\055" +
    "\041\065\042\051\047\207\001\002\000\022\015\140\016" +
    "\147\017\152\022\145\023\141\024\151\052\150\062\146" +
    "\001\002\000\006\021\212\065\211\001\002\000\030\015" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\052\uffd2\053\uffd2\062\uffd2\065\uffd2\001\002\000\022\015" +
    "\140\016\147\017\152\022\145\023\141\024\151\052\150" +
    "\062\146\001\002\000\030\015\uffe0\016\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\052\uffe0\053\uffe0\062\uffe0" +
    "\065\uffe0\001\002\000\004\065\215\001\002\000\030\015" +
    "\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\052\uffd3\053\uffd3\062\uffd3\065\uffd3\001\002\000\004\053" +
    "\uffe2\001\002\000\020\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\025\uffef\053\uffef\060\171\001\002\000\016\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\025\ufff1\053\ufff1\001\002\000\030" +
    "\010\046\011\043\012\035\013\036\014\041\030\037\031" +
    "\047\046\033\057\040\062\042\063\034\001\002\000\004" +
    "\060\225\001\002\000\004\060\224\001\002\000\030\015" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\052\uffd6\053\uffd6\062\uffd6\065\uffd6\001\002\000\030\015" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\052\uffd5\053\uffd5\062\uffd5\065\uffd5\001\002\000\034\026" +
    "\054\027\053\030\057\031\063\032\062\033\060\034\052" +
    "\035\064\036\056\037\055\041\065\042\051\060\227\001" +
    "\002\000\030\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\052\uffde\053\uffde\062\uffde\065\uffde\001" +
    "\002\000\030\010\046\011\043\012\035\013\036\014\041" +
    "\030\037\031\047\046\033\057\040\062\042\063\034\001" +
    "\002\000\034\026\054\027\053\030\057\031\063\032\062" +
    "\033\060\034\052\035\064\036\056\037\055\041\065\042" +
    "\051\047\232\001\002\000\022\015\140\016\147\017\152" +
    "\022\145\023\141\024\151\052\150\062\146\001\002\000" +
    "\030\015\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\052\uffdf\053\uffdf\062\uffdf\065\uffdf\001\002\000" +
    "\004\062\235\001\002\000\010\047\uffd1\050\067\055\uffd1" +
    "\001\002\000\006\047\uffcc\055\242\001\002\000\004\047" +
    "\240\001\002\000\004\060\241\001\002\000\030\015\uffdd" +
    "\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\052" +
    "\uffdd\053\uffdd\062\uffdd\065\uffdd\001\002\000\004\062\235" +
    "\001\002\000\004\047\uffcd\001\002\000\010\047\uffe4\050" +
    "\245\055\uffe4\001\002\000\004\051\246\001\002\000\006" +
    "\047\uffe3\055\uffe3\001\002\000\012\004\010\005\022\006" +
    "\011\007\023\001\002\000\004\047\uffe6\001\002\000\004" +
    "\053\ufffc\001\002\000\036\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\052\ufffe\053\ufffe\062\ufffe\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\011\004\016" +
    "\006\013\014\017\034\015\035\014\036\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\251\006\013\014\017\034\015\035" +
    "\014\036\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\123\011\121\013\122\014\125\001\001\000" +
    "\002\001\001\000\006\014\024\036\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\027\001\001\000\010\023\031\030\044" +
    "\033\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\103\023\031\030\102\033\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\031\030\101\033\043\001\001\000\010" +
    "\023\031\030\100\033\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\060\001\001\000\002\001\001\000\010\023\031\030" +
    "\047\033\043\001\001\000\004\031\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\031\030\065\033\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\060\001\001\000\010\023" +
    "\031\030\076\033\043\001\001\000\014\023\031\024\070" +
    "\030\072\032\071\033\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\060\001\001\000\012\023\031" +
    "\024\074\030\072\033\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\060\001\001\000\002\001\001" +
    "\000\004\031\060\001\001\000\004\031\060\001\001\000" +
    "\004\031\060\001\001\000\002\001\001\000\010\023\031" +
    "\030\105\033\043\001\001\000\004\031\060\001\001\000" +
    "\002\001\001\000\010\023\031\030\110\033\043\001\001" +
    "\000\004\031\060\001\001\000\010\023\031\030\112\033" +
    "\043\001\001\000\004\031\060\001\001\000\002\001\001" +
    "\000\004\010\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\250" +
    "\011\121\013\122\014\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\131\015\133\016\132\017\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\136\006" +
    "\013\014\017\034\015\035\014\036\012\001\001\000\010" +
    "\020\142\021\143\023\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\215\021\143\023\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\165\006\013" +
    "\014\017\034\015\035\014\036\012\001\001\000\010\023" +
    "\031\030\163\033\043\001\001\000\002\001\001\000\014" +
    "\023\031\026\153\027\154\030\155\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\060\001\001" +
    "\000\012\023\031\026\157\030\155\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\060\001\001\000\002\001\001\000" +
    "\010\020\166\021\143\023\141\001\001\000\002\001\001" +
    "\000\004\012\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\031\026\173\030\155\033\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\031\024\200\030\072\033\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\031\030\205\033\043" +
    "\001\001\000\004\031\060\001\001\000\006\021\207\023" +
    "\141\001\001\000\004\022\212\001\001\000\002\001\001" +
    "\000\006\021\213\023\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\217\001\001\000\002\001\001\000\010\023\031\030" +
    "\225\033\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\060\001" +
    "\001\000\002\001\001\000\010\023\031\030\230\033\043" +
    "\001\001\000\004\031\060\001\001\000\006\021\232\023" +
    "\141\001\001\000\002\001\001\000\006\023\235\025\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\235" +
    "\025\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\131\016\247" +
    "\017\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OPENCURLY memberdecls CLOSEDCURLY 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls m = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Program(i, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecls methoddecls 
            {
              Memberdecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecls f = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls m = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Memberdecls(f, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl a = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls b = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecls(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= 
            {
              Fielddecls RESULT =null;
		RESULT = new Fielddecls();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methoddecls ::= methoddecl methoddecls 
            {
              Methoddecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl a = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls b = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Methoddecls(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= 
            {
              Methoddecls RESULT =null;
		RESULT = new Methoddecls();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fielddecl ::= fielddecla 
            {
              Fielddecl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecla a = (Fielddecla)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecl(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fielddecl ::= fielddeclb 
            {
              Fielddecl RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddeclb b = (Fielddeclb)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecl(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fielddecl ::= arraydecl 
            {
              Fielddecl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arraydecl a = (Arraydecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecl(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddecla ::= FINAL fielddeclb 
            {
              Fielddecla RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddeclb field = (Fielddeclb)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecla("final", field);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecla",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fielddeclb ::= type ID optionalexpr SEMICOLON 
            {
              Fielddeclb RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr e = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Fielddeclb(t, i, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddeclb",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optionalfinal ::= FINAL 
            {
              Optionalfinal RESULT =null;
		RESULT = new Optionalfinal("final");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalfinal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optionalfinal ::= 
            {
              Optionalfinal RESULT =null;
		RESULT = new Optionalfinal("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalfinal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optionalexpr ::= ASSMNT expr 
            {
              Optionalexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Optionalexpr(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalexpr ::= 
            {
              Optionalexpr RESULT =null;
		RESULT = new Optionalexpr();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methoddecl ::= returntype ID OPENPARAN argdecls CLOSEDPARAN OPENCURLY fielddecls stmts CLOSEDCURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Returntype r = (Returntype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls args = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls field = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi semi = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Methoddecl(r,i,args,field,s,semi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optionalsemi ::= SEMICOLON 
            {
              Optionalsemi RESULT =null;
		RESULT = new Optionalsemi(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optionalsemi ::= 
            {
              Optionalsemi RESULT =null;
		RESULT = new Optionalsemi();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // returntype ::= type 
            {
              Returntype RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Returntype(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returntype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // returntype ::= VOID 
            {
              Returntype RESULT =null;
		RESULT = new Returntype("void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returntype",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = new Type("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argdecls ::= argdecllist 
            {
              Argdecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecllist a = (Argdecllist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecls(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argdecls ::= 
            {
              Argdecls RESULT =null;
		RESULT = new Argdecls();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argdecllist ::= argdecl COMMA argdecllist 
            {
              Argdecllist RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecllist l = (Argdecllist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecllist(a, l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argdecllist ::= argdecl 
            {
              Argdecllist RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecllist(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argdecl ::= type ID 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecl(t, i, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argdecl ::= type ID OPENBRACK CLOSEDBRACK 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Argdecl(t,i, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmts(st,sts);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmts ::= 
            {
              Stmts RESULT =null;
		RESULT = new Stmts();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF OPENPARAN expr CLOSEDPARAN stmt ifend 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ifend ie = (Ifend)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmt(e,s,ie);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE OPENPARAN expr CLOSEDPARAN stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmt(e,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= name ASSMNT expr SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stmt(n,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= READ OPENPARAN readlist CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= PRINT OPENPARAN printlist CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= PRINTLINE OPENPARAN printlinelist CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist p = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= ID OPENPARAN CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Stmt(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= ID OPENPARAN args CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(i, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= RETURN SEMICOLON 
            {
              Stmt RESULT =null;
		RESULT = new Stmt("return", ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stmt("return", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= name INCREMENT SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(n, "++");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= name DECREMENT SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(n, "--");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= OPENCURLY fielddecls stmts CLOSEDCURLY optionalsemi 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls f = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts st = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi semi = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmt(f,st,semi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifend ::= ELSE stmt FI 
            {
              Ifend RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Ifend(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ifend ::= FI 
            {
              Ifend RESULT =null;
		RESULT = new Ifend();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Name(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // name ::= ID OPENBRACK expr CLOSEDBRACK 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Name(i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Args(e, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Args(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // readlist ::= name COMMA readlist 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Readlist(n, r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Readlist(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // printlist ::= expr COMMA printlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlist(e, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlist(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlinelist(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		RESULT = new Printlinelist();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= ID OPENPARAN optionalargs CLOSEDPARAN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalargs a = (Optionalargs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(i, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char b = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float d = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT = new Expr("true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT = new Expr("false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr binaryop expr 
            {
              Expr RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binaryop bin = (Binaryop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(lhs, bin, rhs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= OPENPARAN expr CLOSEDPARAN 
            {
              Expr RESULT =null;
		int exprInputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprInputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr exprInput = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(exprInput);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= unaryexpr 
            {
              Expr RESULT =null;
		int unExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Unaryexpr unExpr = (Unaryexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(unExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= OPENPARAN type CLOSEDPARAN expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(t, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= OPENPARAN expr QUEST expr COLON expr CLOSEDPARAN 
            {
              Expr RESULT =null;
		int oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr one = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr two = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int threeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int threeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr three = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(one,two,three);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binaryop ::= MULT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binaryop ::= DIVIDE 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryop ::= ADD 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryop ::= SUBTRACT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryop ::= LESSTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryop ::= GREATERTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binaryop ::= LESSTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binaryop ::= GREATERTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binaryop ::= EQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binaryop ::= NOTEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binaryop ::= OR 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binaryop ::= AND 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // optionalargs ::= args 
            {
              Optionalargs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Optionalargs(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalargs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // optionalargs ::= 
            {
              Optionalargs RESULT =null;
		RESULT = new Optionalargs();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalargs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unaryexpr ::= TILDE expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("~", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unaryexpr ::= SUBTRACT expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("-", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unaryexpr ::= ADD expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("+", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arraydecl ::= type ID OPENBRACK INTLIT CLOSEDBRACK SEMICOLON 
            {
              Arraydecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int input = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Arraydecl(t,i,input);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraydecl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
