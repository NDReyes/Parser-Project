
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\002\000\002\040\004\000" +
    "\002\006\006\000\002\006\005\000\002\006\007\000\002" +
    "\010\004\000\002\010\002\000\002\011\013\000\002\011" +
    "\014\000\002\011\012\000\002\011\013\000\002\012\003" +
    "\000\002\012\002\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\002\000\002\016\005\000\002\016\003\000\002\017" +
    "\003\000\002\017\005\000\002\020\004\000\002\020\002" +
    "\000\002\021\010\000\002\021\007\000\002\021\006\000" +
    "\002\021\007\000\002\021\007\000\002\021\007\000\002" +
    "\021\006\000\002\021\007\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\007\000\002\021\006" +
    "\000\002\041\003\000\002\041\003\000\002\022\005\000" +
    "\002\022\003\000\002\023\003\000\002\023\006\000\002" +
    "\024\005\000\002\024\003\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\003\000\002\027\003" +
    "\000\002\027\002\000\002\030\003\000\002\030\006\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\005\000\002\030\005\000\002\030\003\000\002\030\006" +
    "\000\002\030\011\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\002\000\002\033\004\000" +
    "\002\033\004\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\020\005\001\002\000\004\002\273\001" +
    "\002\000\004\062\006\001\002\000\004\052\007\001\002" +
    "\000\020\004\010\005\023\006\013\007\024\025\016\053" +
    "\ufffa\064\022\001\002\000\006\047\uffed\062\uffed\001\002" +
    "\000\016\004\010\005\023\006\013\007\024\025\016\053" +
    "\ufffa\001\002\000\004\053\270\001\002\000\006\047\uffeb" +
    "\062\uffeb\001\002\000\040\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\052\ufffc\053\ufffc\062\ufffc\064\ufffc\001\002\000" +
    "\004\053\ufffe\001\002\000\004\062\254\001\002\000\020" +
    "\004\010\005\023\006\013\007\024\025\016\053\ufffa\064" +
    "\022\001\002\000\004\062\252\001\002\000\012\043\026" +
    "\046\116\050\114\060\ufff4\001\002\000\012\004\010\005" +
    "\023\006\013\007\024\001\002\000\006\047\uffec\062\uffec" +
    "\001\002\000\006\047\uffea\062\uffea\001\002\000\006\043" +
    "\026\060\ufff4\001\002\000\030\010\044\011\043\012\034" +
    "\013\035\014\040\030\037\031\046\046\032\057\036\062" +
    "\041\063\033\001\002\000\004\060\030\001\002\000\040" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\052\ufff8\053\ufff8" +
    "\062\ufff8\064\ufff8\001\002\000\046\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\047\uffc6\051\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\060\uffc6\001\002\000\040\004\010\005\023" +
    "\006\013\007\024\010\044\011\043\012\034\013\035\014" +
    "\040\030\037\031\046\046\032\057\036\062\041\063\033" +
    "\001\002\000\046\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\uffc4" +
    "\042\uffc4\047\uffc4\051\uffc4\054\uffc4\055\uffc4\056\uffc4\060" +
    "\uffc4\001\002\000\046\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041" +
    "\uffc2\042\uffc2\047\uffc2\051\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\060\uffc2\001\002\000\046\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\041\uffc0\042\uffc0\047\uffc0\051\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\060\uffc0\001\002\000\030\010\044\011\043\012\034" +
    "\013\035\014\040\030\037\031\046\046\032\057\036\062" +
    "\041\063\033\001\002\000\030\010\044\011\043\012\034" +
    "\013\035\014\040\030\037\031\046\046\032\057\036\062" +
    "\041\063\033\001\002\000\046\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\041\uffbf\042\uffbf\047\uffbf\051\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\060\uffbf\001\002\000\052\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\041\uffd0\042\uffd0\046\067\047\uffd0\050\066\051" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0\001\002\000\046" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\047\uffbc" +
    "\051\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\001\002\000" +
    "\046\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3\047" +
    "\uffc3\051\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3\001\002" +
    "\000\046\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1\042\uffc1" +
    "\047\uffc1\051\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\001" +
    "\002\000\034\026\053\027\052\030\056\031\062\032\061" +
    "\033\057\034\051\035\064\036\055\037\054\041\063\042" +
    "\050\060\ufff5\001\002\000\030\010\044\011\043\012\034" +
    "\013\035\014\040\030\037\031\046\046\032\057\036\062" +
    "\041\063\033\001\002\000\046\026\053\027\052\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\041\uffaa\042\uffaa\047\uffaa\051\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\060\uffaa\001\002\000\030\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\030\uffae\031\uffae\046\uffae\057\uffae" +
    "\062\uffae\063\uffae\001\002\000\030\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\030\uffb3\031\uffb3\046\uffb3\057\uffb3" +
    "\062\uffb3\063\uffb3\001\002\000\030\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\030\uffb8\031\uffb8\046\uffb8\057\uffb8" +
    "\062\uffb8\063\uffb8\001\002\000\030\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\030\uffb9\031\uffb9\046\uffb9\057\uffb9" +
    "\062\uffb9\063\uffb9\001\002\000\030\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\030\uffb0\031\uffb0\046\uffb0\057\uffb0" +
    "\062\uffb0\063\uffb0\001\002\000\030\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\030\uffb1\031\uffb1\046\uffb1\057\uffb1" +
    "\062\uffb1\063\uffb1\001\002\000\030\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\030\uffb7\031\uffb7\046\uffb7\057\uffb7" +
    "\062\uffb7\063\uffb7\001\002\000\030\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\030\uffb4\031\uffb4\046\uffb4\057\uffb4" +
    "\062\uffb4\063\uffb4\001\002\000\030\010\044\011\043\012" +
    "\034\013\035\014\040\030\037\031\046\046\032\057\036" +
    "\062\041\063\033\001\002\000\030\010\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\030\uffb5\031\uffb5\046\uffb5\057\uffb5" +
    "\062\uffb5\063\uffb5\001\002\000\030\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\030\uffb6\031\uffb6\046\uffb6\057\uffb6" +
    "\062\uffb6\063\uffb6\001\002\000\030\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\030\uffaf\031\uffaf\046\uffaf\057\uffaf" +
    "\062\uffaf\063\uffaf\001\002\000\030\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\030\uffb2\031\uffb2\046\uffb2\057\uffb2" +
    "\062\uffb2\063\uffb2\001\002\000\046\026\053\027\052\030" +
    "\056\031\062\032\061\033\057\034\051\035\064\036\055" +
    "\037\054\041\063\042\050\047\uffbe\051\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\060\uffbe\001\002\000\030\010\044\011\043" +
    "\012\034\013\035\014\040\030\037\031\046\046\032\057" +
    "\036\062\041\063\033\001\002\000\032\010\044\011\043" +
    "\012\034\013\035\014\040\030\037\031\046\046\032\047" +
    "\uffac\057\036\062\041\063\033\001\002\000\004\047\uffad" +
    "\001\002\000\004\047\075\001\002\000\036\026\053\027" +
    "\052\030\056\031\062\032\061\033\057\034\051\035\064" +
    "\036\055\037\054\041\063\042\050\047\uffcd\055\073\001" +
    "\002\000\030\010\044\011\043\012\034\013\035\014\040" +
    "\030\037\031\046\046\032\057\036\062\041\063\033\001" +
    "\002\000\004\047\uffce\001\002\000\046\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\041\uffc5\042\uffc5\047\uffc5\051\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\060\uffc5\001\002\000\034\026\053\027" +
    "\052\030\056\031\062\032\061\033\057\034\051\035\064" +
    "\036\055\037\054\041\063\042\050\051\077\001\002\000" +
    "\054\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\051\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\060\uffcf\001\002\000\046\026\053\027\052\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\041\uffa9\042\uffa9\047\uffa9\051\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\060\uffa9\001\002\000\046\026\053\027\052" +
    "\030\056\031\062\032\061\033\057\034\051\035\064\036" +
    "\055\037\054\041\063\042\050\047\uffab\051\uffab\054\uffab" +
    "\055\uffab\056\uffab\060\uffab\001\002\000\036\026\053\027" +
    "\052\030\056\031\062\032\061\033\057\034\051\035\064" +
    "\036\055\037\054\041\063\042\050\047\106\056\107\001" +
    "\002\000\004\047\104\001\002\000\030\010\044\011\043" +
    "\012\034\013\035\014\040\030\037\031\046\046\032\057" +
    "\036\062\041\063\033\001\002\000\046\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\041\uffbb\042\uffbb\047\uffbb\051\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\060\uffbb\001\002\000\046\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\041\uffbd\042\uffbd\047\uffbd\051\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\060\uffbd\001\002\000\030\010\044" +
    "\011\043\012\034\013\035\014\040\030\037\031\046\046" +
    "\032\057\036\062\041\063\033\001\002\000\034\026\053" +
    "\027\052\030\056\031\062\032\061\033\057\034\051\035" +
    "\064\036\055\037\054\041\063\042\050\054\111\001\002" +
    "\000\030\010\044\011\043\012\034\013\035\014\040\030" +
    "\037\031\046\046\032\057\036\062\041\063\033\001\002" +
    "\000\034\026\053\027\052\030\056\031\062\032\061\033" +
    "\057\034\051\035\064\036\055\037\054\041\063\042\050" +
    "\047\113\001\002\000\046\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\041\uffba\042\uffba\047\uffba\051\uffba\054\uffba\055\uffba\056" +
    "\uffba\060\uffba\001\002\000\004\063\247\001\002\000\004" +
    "\060\246\001\002\000\014\004\010\005\023\006\013\007" +
    "\024\047\uffe8\001\002\000\004\047\uffe9\001\002\000\006" +
    "\047\uffe6\055\244\001\002\000\010\047\uffe5\050\242\055" +
    "\uffe5\001\002\000\004\047\123\001\002\000\004\052\124" +
    "\001\002\000\036\004\010\005\023\006\013\007\024\015" +
    "\125\016\137\017\131\022\133\023\126\024\132\052\127" +
    "\053\uffe2\062\134\064\022\001\002\000\004\046\232\001" +
    "\002\000\004\046\226\001\002\000\036\004\010\005\023" +
    "\006\013\007\024\015\125\016\137\017\131\022\133\023" +
    "\126\024\132\052\127\053\uffe2\062\134\064\022\001\002" +
    "\000\036\004\010\005\023\006\013\007\024\015\125\016" +
    "\137\017\131\022\133\023\126\024\132\052\127\053\uffe2" +
    "\062\134\064\022\001\002\000\004\046\206\001\002\000" +
    "\032\010\044\011\043\012\034\013\035\014\040\030\037" +
    "\031\046\046\032\057\036\060\203\062\041\063\033\001" +
    "\002\000\004\046\172\001\002\000\014\043\uffd0\044\uffd0" +
    "\045\uffd0\046\164\050\066\001\002\000\004\053\161\001" +
    "\002\000\010\043\026\050\114\060\ufff4\001\002\000\004" +
    "\046\152\001\002\000\024\015\125\016\137\017\131\022" +
    "\133\023\126\024\132\052\127\053\uffe2\062\134\001\002" +
    "\000\010\043\142\044\145\045\144\001\002\000\030\010" +
    "\044\011\043\012\034\013\035\014\040\030\037\031\046" +
    "\046\032\057\036\062\041\063\033\001\002\000\004\060" +
    "\146\001\002\000\004\060\uffd3\001\002\000\004\060\uffd4" +
    "\001\002\000\030\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\052\uffd7\053\uffd7\062\uffd7\065\uffd7" +
    "\001\002\000\034\026\053\027\052\030\056\031\062\032" +
    "\061\033\057\034\051\035\064\036\055\037\054\041\063" +
    "\042\050\060\150\001\002\000\030\015\uffdf\016\uffdf\017" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\052\uffdf\053\uffdf" +
    "\062\uffdf\065\uffdf\001\002\000\004\053\uffe3\001\002\000" +
    "\030\010\044\011\043\012\034\013\035\014\040\030\037" +
    "\031\046\046\032\057\036\062\041\063\033\001\002\000" +
    "\004\047\157\001\002\000\036\026\053\027\052\030\056" +
    "\031\062\032\061\033\057\034\051\035\064\036\055\037" +
    "\054\041\063\042\050\047\uffc9\055\155\001\002\000\030" +
    "\010\044\011\043\012\034\013\035\014\040\030\037\031" +
    "\046\046\032\057\036\062\041\063\033\001\002\000\004" +
    "\047\uffca\001\002\000\004\060\160\001\002\000\030\015" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\052\uffdd\053\uffdd\062\uffdd\065\uffdd\001\002\000\020\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\025\uffee\053\uffee\060\162" +
    "\001\002\000\042\004\uffef\005\uffef\006\uffef\007\uffef\015" +
    "\uffef\016\uffef\017\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\052\uffef\053\uffef\062\uffef\065\uffef\001\002\000" +
    "\016\004\ufff1\005\ufff1\006\ufff1\007\ufff1\025\ufff1\053\ufff1" +
    "\001\002\000\032\010\044\011\043\012\034\013\035\014" +
    "\040\030\037\031\046\046\032\047\165\057\036\062\041" +
    "\063\033\001\002\000\004\060\171\001\002\000\004\047" +
    "\167\001\002\000\004\060\170\001\002\000\030\015\uffda" +
    "\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda\052" +
    "\uffda\053\uffda\062\uffda\065\uffda\001\002\000\030\015\uffdb" +
    "\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\052" +
    "\uffdb\053\uffdb\062\uffdb\065\uffdb\001\002\000\030\010\044" +
    "\011\043\012\034\013\035\014\040\030\037\031\046\046" +
    "\032\057\036\062\041\063\033\001\002\000\034\026\053" +
    "\027\052\030\056\031\062\032\061\033\057\034\051\035" +
    "\064\036\055\037\054\041\063\042\050\047\174\001\002" +
    "\000\022\015\125\016\137\017\131\022\133\023\126\024" +
    "\132\052\127\062\134\001\002\000\006\021\177\065\176" +
    "\001\002\000\030\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\052\uffd1\053\uffd1\062\uffd1\065\uffd1" +
    "\001\002\000\022\015\125\016\137\017\131\022\133\023" +
    "\126\024\132\052\127\062\134\001\002\000\030\015\uffe1" +
    "\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\052" +
    "\uffe1\053\uffe1\062\uffe1\065\uffe1\001\002\000\004\065\202" +
    "\001\002\000\030\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\052\uffd2\053\uffd2\062\uffd2\065\uffd2" +
    "\001\002\000\030\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\052\uffd9\053\uffd9\062\uffd9\065\uffd9" +
    "\001\002\000\034\026\053\027\052\030\056\031\062\032" +
    "\061\033\057\034\051\035\064\036\055\037\054\041\063" +
    "\042\050\060\205\001\002\000\030\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\052\uffd8\053\uffd8" +
    "\062\uffd8\065\uffd8\001\002\000\032\010\044\011\043\012" +
    "\034\013\035\014\040\030\037\031\046\046\032\047\uffc7" +
    "\057\036\062\041\063\033\001\002\000\004\047\uffc8\001" +
    "\002\000\004\047\211\001\002\000\004\060\212\001\002" +
    "\000\030\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\052\uffdc\053\uffdc\062\uffdc\065\uffdc\001\002" +
    "\000\040\004\ufffd\005\ufffd\006\ufffd\007\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\052\ufffd" +
    "\053\ufffd\062\ufffd\064\ufffd\001\002\000\004\053\215\001" +
    "\002\000\020\004\uffee\005\uffee\006\uffee\007\uffee\025\uffee" +
    "\053\uffee\060\162\001\002\000\016\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\025\ufff3\053\ufff3\001\002\000\036\004\010" +
    "\005\023\006\013\007\024\015\125\016\137\017\131\022" +
    "\133\023\126\024\132\052\127\053\uffe2\062\134\064\022" +
    "\001\002\000\004\053\221\001\002\000\032\015\uffee\016" +
    "\uffee\017\uffee\021\uffee\022\uffee\023\uffee\024\uffee\052\uffee" +
    "\053\uffee\060\162\062\uffee\065\uffee\001\002\000\030\015" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\052\uffd5\053\uffd5\062\uffd5\065\uffd5\001\002\000\004\053" +
    "\224\001\002\000\032\015\uffee\016\uffee\017\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\052\uffee\053\uffee\060\162\062" +
    "\uffee\065\uffee\001\002\000\030\015\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\052\uffd6\053\uffd6\062" +
    "\uffd6\065\uffd6\001\002\000\030\010\044\011\043\012\034" +
    "\013\035\014\040\030\037\031\046\046\032\057\036\062" +
    "\041\063\033\001\002\000\034\026\053\027\052\030\056" +
    "\031\062\032\061\033\057\034\051\035\064\036\055\037" +
    "\054\041\063\042\050\047\230\001\002\000\022\015\125" +
    "\016\137\017\131\022\133\023\126\024\132\052\127\062" +
    "\134\001\002\000\030\015\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\052\uffe0\053\uffe0\062\uffe0\065" +
    "\uffe0\001\002\000\004\062\233\001\002\000\010\047\uffd0" +
    "\050\066\055\uffd0\001\002\000\006\047\uffcb\055\240\001" +
    "\002\000\004\047\236\001\002\000\004\060\237\001\002" +
    "\000\030\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\052\uffde\053\uffde\062\uffde\065\uffde\001\002" +
    "\000\004\062\233\001\002\000\004\047\uffcc\001\002\000" +
    "\004\051\243\001\002\000\006\047\uffe4\055\uffe4\001\002" +
    "\000\012\004\010\005\023\006\013\007\024\001\002\000" +
    "\004\047\uffe7\001\002\000\040\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\015\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\052\ufff7\053\ufff7\062\ufff7\064\ufff7\001\002" +
    "\000\004\051\250\001\002\000\004\060\251\001\002\000" +
    "\040\004\ufff6\005\ufff6\006\ufff6\007\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\052\ufff6\053" +
    "\ufff6\062\ufff6\064\ufff6\001\002\000\016\043\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\055\ufff9\060\ufff9\001\002\000\004\053" +
    "\uffff\001\002\000\004\046\255\001\002\000\014\004\010" +
    "\005\023\006\013\007\024\047\uffe8\001\002\000\004\047" +
    "\257\001\002\000\004\052\260\001\002\000\036\004\010" +
    "\005\023\006\013\007\024\015\125\016\137\017\131\022" +
    "\133\023\126\024\132\052\127\053\uffe2\062\134\064\022" +
    "\001\002\000\036\004\010\005\023\006\013\007\024\015" +
    "\125\016\137\017\131\022\133\023\126\024\132\052\127" +
    "\053\uffe2\062\134\064\022\001\002\000\004\053\263\001" +
    "\002\000\020\004\uffee\005\uffee\006\uffee\007\uffee\025\uffee" +
    "\053\uffee\060\162\001\002\000\016\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\025\ufff0\053\ufff0\001\002\000\004\053\266" +
    "\001\002\000\020\004\uffee\005\uffee\006\uffee\007\uffee\025" +
    "\uffee\053\uffee\060\162\001\002\000\016\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\025\ufff2\053\ufff2\001\002\000\004\002" +
    "\001\001\002\000\004\053\ufffb\001\002\000\004\046\116" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\011\004\016" +
    "\005\014\006\013\011\010\014\017\040\020\001\001\000" +
    "\002\001\001\000\012\005\270\011\010\014\017\040\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\252" +
    "\006\212\011\010\014\017\040\020\001\001\000\002\001" +
    "\001\000\004\010\114\001\001\000\006\014\017\040\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\026\001\001\000\010\023\030\030\044\033\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\102\023\030\030\101\033\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\030\030\100\033\041\001\001\000\010\023\030\030\077" +
    "\033\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\057\001\001\000\010\023\030\030\046\033\041\001" +
    "\001\000\004\031\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\030\030\064\033\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\057\001\001\000\010\023\030\030\075\033" +
    "\041\001\001\000\014\023\030\024\067\030\071\032\070" +
    "\033\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\057\001\001\000\012\023\030\024\073\030\071" +
    "\033\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\057\001\001\000\002\001\001\000\004\031\057" +
    "\001\001\000\004\031\057\001\001\000\004\031\057\001" +
    "\001\000\002\001\001\000\010\023\030\030\104\033\041" +
    "\001\001\000\004\031\057\001\001\000\002\001\001\000" +
    "\010\023\030\030\107\033\041\001\001\000\004\031\057" +
    "\001\001\000\010\023\030\030\111\033\041\001\001\000" +
    "\004\031\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\017\015\121\016\116\017" +
    "\117\040\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\127\006\013\014\017\020\134\021\137\023\140" +
    "\040\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\216\006\013\014\017\020\217\021\137\023\140" +
    "\040\135\001\001\000\016\006\212\014\017\020\213\021" +
    "\137\023\140\040\135\001\001\000\002\001\001\000\010" +
    "\023\030\030\203\033\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\114\001\001" +
    "\000\002\001\001\000\010\020\150\021\137\023\140\001" +
    "\001\000\004\041\142\001\001\000\010\023\030\030\146" +
    "\033\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\030\026" +
    "\152\030\153\033\041\001\001\000\002\001\001\000\004" +
    "\031\057\001\001\000\012\023\030\026\155\030\153\033" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\030\024\165\030\071\033\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\030" +
    "\030\172\033\041\001\001\000\004\031\057\001\001\000" +
    "\006\021\174\023\140\001\001\000\004\022\177\001\001" +
    "\000\002\001\001\000\006\021\200\023\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\057\001\001\000\002\001\001\000" +
    "\014\023\030\026\206\027\207\030\153\033\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\215\001\001\000\002\001\001\000\016\006\212\014" +
    "\017\020\222\021\137\023\140\040\135\001\001\000\002" +
    "\001\001\000\004\012\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\224\001\001\000\002\001\001" +
    "\000\010\023\030\030\226\033\041\001\001\000\004\031" +
    "\057\001\001\000\006\021\230\023\140\001\001\000\002" +
    "\001\001\000\006\023\233\025\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\233\025\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\017\016\244\017\117\040\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\017\015\255\016\116\017\117" +
    "\040\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\260\006\013\014\017\020\261\021\137\023\140" +
    "\040\135\001\001\000\016\006\212\014\017\020\264\021" +
    "\137\023\140\040\135\001\001\000\002\001\001\000\004" +
    "\012\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OPENCURLY memberdecls CLOSEDCURLY 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls m = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Program(i, m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecls methoddecls 
            {
              Memberdecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecls f = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls m = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Memberdecls(f,m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              Memberdecls RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls m = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Memberdecls(m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= fielddecls fielddecl 
            {
              Fielddecls RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecls decls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecl decl = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecls(decl, decls);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= fielddecl 
            {
              Fielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fielddecls(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              Methoddecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl a = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls b = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Methoddecls(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              Methoddecls RESULT =null;
		RESULT = new Methoddecls();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldandmethod ::= type ID 
            {
              Fieldandmethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Fieldandmethod(t, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldandmethod",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fielddecl ::= FINAL fieldandmethod optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int fieldmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fieldandmethod fieldm = (Fieldandmethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr e = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Fielddecl("final", fieldm, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddecl ::= fieldandmethod optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int fieldmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fieldandmethod fieldm = (Fieldandmethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr e = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Fielddecl("", fieldm, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fielddecl ::= fieldandmethod OPENBRACK INTLIT CLOSEDBRACK SEMICOLON 
            {
              Fielddecl RESULT =null;
		int fieldmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fieldmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Fieldandmethod fieldm = (Fieldandmethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Fielddecl(fieldm, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optionalexpr ::= ASSMNT expr 
            {
              Optionalexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Optionalexpr(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optionalexpr ::= 
            {
              Optionalexpr RESULT =null;
		RESULT = new Optionalexpr();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methoddecl ::= fieldandmethod OPENPARAN argdecls CLOSEDPARAN OPENCURLY fielddecls stmts CLOSEDCURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int fieldmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fieldmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Fieldandmethod fieldm = (Fieldandmethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls args = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls decls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi semi = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Methoddecl(fieldm, args, decls, s, semi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methoddecl ::= VOID ID OPENPARAN argdecls CLOSEDPARAN OPENCURLY fielddecls stmts CLOSEDCURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls args = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls decls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi semi = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Methoddecl("void", i, args, decls, s, semi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methoddecl ::= fieldandmethod OPENPARAN argdecls CLOSEDPARAN OPENCURLY stmts CLOSEDCURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int fieldmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fieldmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Fieldandmethod fieldm = (Fieldandmethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Argdecls args = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi semi = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methoddecl ::= VOID ID OPENPARAN argdecls CLOSEDPARAN OPENCURLY stmts CLOSEDCURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Argdecls args = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi semi = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optionalsemi ::= SEMICOLON 
            {
              Optionalsemi RESULT =null;
		RESULT = new Optionalsemi(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // optionalsemi ::= 
            {
              Optionalsemi RESULT =null;
		RESULT = new Optionalsemi();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = new Type("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argdecls ::= argdecllist 
            {
              Argdecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecllist a = (Argdecllist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecls(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argdecls ::= 
            {
              Argdecls RESULT =null;
		RESULT = new Argdecls();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argdecllist ::= argdecl COMMA argdecllist 
            {
              Argdecllist RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecllist l = (Argdecllist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecllist(a, l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argdecllist ::= argdecl 
            {
              Argdecllist RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecllist(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argdecl ::= fieldandmethod 
            {
              Argdecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fieldandmethod f = (Fieldandmethod)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Argdecl(f, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argdecl ::= fieldandmethod OPENBRACK CLOSEDBRACK 
            {
              Argdecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fieldandmethod f = (Fieldandmethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Argdecl(f, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmts(st,sts);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmts ::= 
            {
              Stmts RESULT =null;
		RESULT = new Stmts();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF OPENPARAN expr CLOSEDPARAN stmt ifend 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ifend ie = (Ifend)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmt(e,s,ie);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= WHILE OPENPARAN expr CLOSEDPARAN stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmt(e,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= name ASSMNT expr SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stmt(n,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= READ OPENPARAN readlist CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= PRINT OPENPARAN printlist CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= PRINTLINE OPENPARAN printlinelist CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist p = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= ID OPENPARAN CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Stmt(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= ID OPENPARAN args CLOSEDPARAN SEMICOLON 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Stmt(i, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= RETURN SEMICOLON 
            {
              Stmt RESULT =null;
		RESULT = new Stmt("return", ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stmt("return", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= name incordec SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Incordec i = (Incordec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Stmt(i, n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= OPENCURLY fielddecls stmts CLOSEDCURLY optionalsemi 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls f = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts st = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi semi = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmt(f,st,semi);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= OPENCURLY stmts CLOSEDCURLY optionalsemi 
            {
              Stmt RESULT =null;
		int stssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts stss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seminputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seminputright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi seminput = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Stmt(stss,seminput);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // incordec ::= INCREMENT 
            {
              Incordec RESULT =null;
		RESULT = new Incordec("++");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incordec",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // incordec ::= DECREMENT 
            {
              Incordec RESULT =null;
		RESULT = new Incordec("--");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incordec",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ifend ::= ELSE stmt FI 
            {
              Ifend RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Ifend(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifend ::= FI 
            {
              Ifend RESULT =null;
		RESULT = new Ifend();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Name(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // name ::= ID OPENBRACK expr CLOSEDBRACK 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Name(i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Args(e, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Args(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // readlist ::= name COMMA readlist 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Readlist(n, r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Readlist(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // printlist ::= expr COMMA printlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlist(e, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlist(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Printlinelist(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		RESULT = new Printlinelist();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= ID OPENPARAN optionalargs CLOSEDPARAN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalargs a = (Optionalargs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(i, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int a = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char b = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float d = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT = new Expr("true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT = new Expr("false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr binaryop expr 
            {
              Expr RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr lhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binaryop bin = (Binaryop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rhs = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(lhs, bin, rhs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= OPENPARAN expr CLOSEDPARAN 
            {
              Expr RESULT =null;
		int exprInputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprInputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr exprInput = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(exprInput);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= unaryexpr 
            {
              Expr RESULT =null;
		int unExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Unaryexpr unExpr = (Unaryexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(unExpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= OPENPARAN type CLOSEDPARAN expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(t, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= OPENPARAN expr QUEST expr COLON expr CLOSEDPARAN 
            {
              Expr RESULT =null;
		int oneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oneright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr one = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int twoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tworight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr two = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int threeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int threeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr three = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Expr(one,two,three);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binaryop ::= MULT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryop ::= DIVIDE 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryop ::= ADD 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryop ::= SUBTRACT 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryop ::= LESSTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binaryop ::= GREATERTHAN 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binaryop ::= LESSTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binaryop ::= GREATERTHANEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binaryop ::= EQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binaryop ::= NOTEQ 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("<>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binaryop ::= OR 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binaryop ::= AND 
            {
              Binaryop RESULT =null;
		 RESULT = new Binaryop("&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // optionalargs ::= args 
            {
              Optionalargs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Optionalargs(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalargs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // optionalargs ::= 
            {
              Optionalargs RESULT =null;
		RESULT = new Optionalargs();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalargs",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unaryexpr ::= TILDE expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("~", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unaryexpr ::= SUBTRACT expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("-", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unaryexpr ::= ADD expr 
            {
              Unaryexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Unaryexpr("+", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
