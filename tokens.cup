
/* Author: Nestor Reyes ndr170001
 * Date: 9/16/2020
 * Purpose: Includes all the terminals necessary to create a lexical analysis.
 */

import java_cup.runtime.*;

terminal INT;
terminal CHAR;
terminal BOOL;
terminal FLOAT;

terminal float FLOATLIT;
terminal char CHARLIT;
terminal String STRLIT;
terminal TRUE;
terminal FALSE;

/* Loop, function, and class related */
terminal READ;
terminal PRINT;
terminal PRINTLINE;
terminal CLASS;
terminal ELSE;
terminal IF;
terminal WHILE;
terminal RETURN;
terminal VOID;

/* Math related */
terminal MULT;
terminal DIVIDE;
terminal ADD;
terminal SUBTRACT;
terminal LESSTHAN;
terminal GREATERTHAN;
terminal LESSTHANEQ;
terminal GREATERTHANEQ;
terminal EQ;
terminal NOTEQ;
terminal BACKSLASH;
terminal OR;
terminal AND;
terminal ASSMNT;
terminal INCREMENT; // ++
terminal DECREMENT; // --

/* Misc symbols */

terminal OPENPARAN; //open parenthesis
terminal CLOSEDPARAN; //closed parenthesis
terminal OPENBRACK; //open bracket
terminal CLOSEDBRACK; //closed bracket
terminal OPENCURLY;
terminal CLOSEDCURLY;
terminal COLON;       //semi-colon

terminal COMMA;
terminal QUEST;
terminal TILDE;
terminal SEMICOLON;

terminal String VAR;
terminal String ID;
terminal int INTLIT;
terminal FINAL;
terminal FI;

non terminal Program program;
non terminal Memberdecls memberdecls;
non terminal Fielddecls fielddecls;
non terminal Methoddecls methoddecls;
non terminal Fielddecl fielddecl;

non terminal Optionalfinal optionalfinal;
non terminal Optionalexpr optionalexpr;
non terminal Methoddecl methoddecl;
non terminal Optionalsemi optionalsemi;
non terminal Returntype returntype;
non terminal Type type;
non terminal Argdecls argdecls;
non terminal Argdecllist argdecllist;
non terminal Argdecl argdecl;
non terminal Stmts stmts;
non terminal Stmt stmt;

non terminal Ifend ifend;
non terminal Name name;
non terminal Args args;
non terminal Readlist readlist;
non terminal Printlist printlist;
non terminal Printlinelist printlinelist;
non terminal Expr expr;
non terminal Binaryop binaryop;

// Extras
non terminal Optionalargs optionalargs;
non terminal Unaryexpr unaryexpr;
non terminal Arraydecl arraydecl;
non terminal Fielddecla fielddecla;
non terminal Fielddeclb fielddeclb;
non terminal Fielddeclc fielddeclc;
non terminal Fieldandmethod fieldandmethod;
non terminal Incordec incordec;
non terminal comments;

//precedence left BOOL, FLOAT, INT, CHAR;

precedence left LESSTHAN, GREATERTHAN, LESSTHANEQ, GREATERTHANEQ, EQ, NOTEQ, OR, AND;
precedence left ADD, SUBTRACT;
precedence left MULT, DIVIDE;
precedence left OPENPARAN, CLOSEDPARAN;


// Java file done.
program ::= CLASS ID:i OPENCURLY memberdecls:m CLOSEDCURLY {:RESULT = new Program(i, m);:}
            ;

memberdecls ::= fielddecls:f methoddecls:m{:RESULT = new Memberdecls(f,m);:}|
                methoddecls:m{:RESULT = new Memberdecls(m);:};

fielddecls ::= fielddecls:decls fielddecl:decl{:RESULT = new Fielddecls(decl, decls);:}|
               fielddecl:f{:RESULT = new Fielddecls(f);:};
               //{:RESULT = new Fielddecls();:};

//Java file done
methoddecls ::= methoddecl:a methoddecls:b {:RESULT = new Methoddecls(a,b);:} |
               {:RESULT = new Methoddecls();:}
               ;

fieldandmethod ::= type:t ID:i {:RESULT = new Fieldandmethod(t, i);:};

fielddecl ::= FINAL fieldandmethod:fieldm optionalexpr:e SEMICOLON{:RESULT = new Fielddecl("final", fieldm, e);:}|
              fieldandmethod:fieldm optionalexpr:e SEMICOLON{:RESULT = new Fielddecl("", fieldm, e);:}|
              fieldandmethod:fieldm OPENBRACK INTLIT:i CLOSEDBRACK SEMICOLON{:RESULT = new Fielddecl(fieldm, i);:};

//Java file done
optionalexpr ::= ASSMNT expr:e {:RESULT = new Optionalexpr(e);:} |
                 {:RESULT = new Optionalexpr();:}
                 ;

methoddecl ::= fieldandmethod:fieldm OPENPARAN argdecls:args CLOSEDPARAN
               OPENCURLY fielddecls:decls stmts:s CLOSEDCURLY
               optionalsemi:semi
               {:RESULT = new Methoddecl(fieldm, args, decls, s, semi);:}|

               VOID ID:i OPENPARAN argdecls:args CLOSEDPARAN
               OPENCURLY fielddecls:decls stmts:s CLOSEDCURLY
               optionalsemi:semi
               {:RESULT = new Methoddecl("void", i, args, decls, s, semi);:}|

               fieldandmethod:fieldm OPENPARAN argdecls:args CLOSEDPARAN
               OPENCURLY stmts:s CLOSEDCURLY
               optionalsemi:semi
               {}|

               VOID ID:i OPENPARAN argdecls:args CLOSEDPARAN
               OPENCURLY stmts:s CLOSEDCURLY
               optionalsemi:semi
               {}


               ;


//Java file done
optionalsemi ::= SEMICOLON {:RESULT = new Optionalsemi(";");:} |
                 {:RESULT = new Optionalsemi();:}
                 ;


//Java file done
type ::= INT{:RESULT = new Type("int");:} |
         CHAR{:RESULT = new Type("char");:} |
         BOOL{:RESULT = new Type("bool");:} |
         FLOAT{:RESULT = new Type("float");:}
         ;

//Java file done
argdecls ::= argdecllist:a{:RESULT = new Argdecls(a);:} |
             {:RESULT = new Argdecls();:};

//Java file done
argdecllist ::= argdecl:a COMMA argdecllist:l {:RESULT = new Argdecllist(a, l);:} |
                argdecl:a{:RESULT = new Argdecllist(a);:};

//Java file done
argdecl ::= fieldandmethod:f {:RESULT = new Argdecl(f, 0);:} |
            fieldandmethod:f OPENBRACK CLOSEDBRACK {:RESULT = new Argdecl(f, 1);:};

//Java file done
stmts ::= stmt:st stmts:sts {:RESULT = new Stmts(st,sts);:}|
          {:RESULT = new Stmts();:};

//Java file done
stmt ::= IF OPENPARAN expr:e CLOSEDPARAN stmt:s ifend:ie{:RESULT = new Stmt(e,s,ie);:}|
         WHILE OPENPARAN expr:e CLOSEDPARAN stmt:s{:RESULT = new Stmt(e,s);:}|
         name:n ASSMNT expr:e SEMICOLON {:RESULT = new Stmt(n,e);:}|
         READ OPENPARAN readlist:r CLOSEDPARAN SEMICOLON{:RESULT = new Stmt(r);:} |
         PRINT OPENPARAN printlist:p CLOSEDPARAN SEMICOLON{:RESULT = new Stmt(p);:} |
         PRINTLINE OPENPARAN printlinelist:p CLOSEDPARAN SEMICOLON {:RESULT = new Stmt(p);:}|
         ID:i OPENPARAN CLOSEDPARAN SEMICOLON {:RESULT = new Stmt(i);:}|
         ID:i OPENPARAN args:a CLOSEDPARAN SEMICOLON {:RESULT = new Stmt(i, a);:}|
         RETURN SEMICOLON{:RESULT = new Stmt("return", ";");:}|
         RETURN expr:e SEMICOLON{:RESULT = new Stmt("return", e);:}|
         name:n incordec:i SEMICOLON {:RESULT = new Stmt(i, n);:}|
         OPENCURLY fielddecls:f stmts:st CLOSEDCURLY optionalsemi:semi {:RESULT = new Stmt(f,st,semi);:} |
         OPENCURLY stmts:stss CLOSEDCURLY optionalsemi:seminput {:RESULT = new Stmt(stss,seminput);:}
         //OPENCURLY CLOSEDCURLY {:RESULT = new Stmt();:}
         ;

//Java file done
incordec ::= INCREMENT {:RESULT = new Incordec("++");:} |
             DECREMENT {:RESULT = new Incordec("--");:};


ifend ::= ELSE stmt:s FI{:RESULT = new Ifend(s);:} |
          FI{:RESULT = new Ifend();:};

//Java file done
name ::= ID:i{:RESULT = new Name(i);:} |
         ID:i OPENBRACK expr:e CLOSEDBRACK {:RESULT = new Name(i,e);:};

//Java file done
args ::= expr:e COMMA args:a {:RESULT = new Args(e, a);:} |
         expr:e{:RESULT = new Args(e);:};

//Java file done
readlist ::= name:n COMMA readlist:r {:RESULT = new Readlist(n, r);:} |
             name:n {:RESULT = new Readlist(n);:};

// Java file done
printlist ::= expr:e COMMA printlist:p {:RESULT = new Printlist(e, p);:} |
              expr:e{:RESULT = new Printlist(e);:};

// Java file done
printlinelist ::= printlist:p {:RESULT = new Printlinelist(p);:} |
                  {:RESULT = new Printlinelist();:};

// Java file done
expr ::= name:n {:RESULT = new Expr(n);:} |
         ID:i OPENPARAN optionalargs:a CLOSEDPARAN {:RESULT = new Expr(i, a);:} |
         INTLIT:a {:RESULT = new Expr(a);:} |
         CHARLIT:b {:RESULT = new Expr(b);:} |
         STRLIT:c {:RESULT = new Expr(c);:} |
         FLOATLIT:d {:RESULT = new Expr(d);:} |
         TRUE{:RESULT = new Expr("true");:} |
         FALSE{:RESULT = new Expr("false");:} |
         expr:lhs binaryop:bin expr:rhs {:RESULT = new Expr(lhs, bin, rhs);:} |
         OPENPARAN expr:exprInput CLOSEDPARAN {:RESULT = new Expr(exprInput);:} |
         unaryexpr:unExpr {:RESULT = new Expr(unExpr);:} |
         OPENPARAN type:t CLOSEDPARAN expr:e {:RESULT = new Expr(t, e);:} |
         OPENPARAN expr:one QUEST expr:two COLON expr:three CLOSEDPARAN{:RESULT = new Expr(one,two,three);:}
         ;


// Java file done
binaryop ::= MULT{: RESULT = new Binaryop("*"); :} |
             DIVIDE{: RESULT = new Binaryop("/"); :} |
             ADD{: RESULT = new Binaryop("+"); :} |
             SUBTRACT{: RESULT = new Binaryop("-"); :} |
             LESSTHAN{: RESULT = new Binaryop("<"); :} |
             GREATERTHAN{: RESULT = new Binaryop(">"); :} |
             LESSTHANEQ{: RESULT = new Binaryop("<="); :} |
             GREATERTHANEQ{: RESULT = new Binaryop(">="); :} |
             EQ{: RESULT = new Binaryop("=="); :} |
             NOTEQ{: RESULT = new Binaryop("<>"); :} |
             OR{: RESULT = new Binaryop("||"); :} |
             AND{: RESULT = new Binaryop("&&"); :}
             ;

//Extras;helpers
//Java file done
optionalargs ::= args:a{:RESULT = new Optionalargs(a);:} |
                 {:RESULT = new Optionalargs();:};

//Java file done
unaryexpr ::= TILDE expr:e{:RESULT = new Unaryexpr("~", e);:} |
              SUBTRACT expr:e {:RESULT = new Unaryexpr("-", e);:} |
              ADD expr:e {:RESULT = new Unaryexpr("+", e);:};
